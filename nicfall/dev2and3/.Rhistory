filt_path <- file.path(path, "trimmed")
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq"))
path <- "~/Downloads/fasta"
#setDadaOpt(MAX_CONSIST=30) #if necessary, increase number of cycles to allow convergence
errF <- learnErrors(filtFs, multithread=TRUE)
# Make directory and filenames for the filtered fastqs
filt_path <- file.path(path, "trimmed")
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq"))
#setDadaOpt(MAX_CONSIST=30) #if necessary, increase number of cycles to allow convergence
errF <- learnErrors(filtFs, multithread=TRUE)
filtFs
# Make directory and filenames for the filtered fastqs
filt_path <- file.path(path, "trimmed")
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq"))
#setDadaOpt(MAX_CONSIST=30) #if necessary, increase number of cycles to allow convergence
errF <- learnErrors(filtFs, multithread=TRUE)
filtFs
fnFs <- sort(list.files(path, pattern = "_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern = "_R2.fastq", full.names = TRUE))
get.sample.name <- function(fname) strsplit(basename(fname), "_")[[1]][1]
sample.names <- unname(sapply(fnFs, get.sample.name))
head(sample.names)
sample.names
#setDadaOpt(MAX_CONSIST=30) #if necessary, increase number of cycles to allow convergence
errF <- learnErrors(filtFs, multithread=TRUE)
filtFs
# Make directory and filenames for the filtered fastqs
filt_path <- file.path(path, "trimmed")
filtFs <- file.path(filt_path, paste0(sample.names, "_F_filt.fastq"))
filtRs <- file.path(filt_path, paste0(sample.names, "_R_filt.fastq"))
#setDadaOpt(MAX_CONSIST=30) #if necessary, increase number of cycles to allow convergence
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
#~############################~#
##### Dereplicate reads ########
#~############################~#
#Dereplication combines all identical sequencing reads into into “unique sequences” with a corresponding “abundance”: the number of reads with that unique sequence.
#Dereplication substantially reduces computation time by eliminating redundant comparisons.
#DADA2 retains a summary of the quality information associated with each unique sequence. The consensus quality profile of a unique sequence is the average of the positional qualities from the dereplicated reads. These quality profiles inform the error model of the subsequent denoising step, significantly increasing DADA2’s accuracy.
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
summary((mergers[[1]]))
seqtab <- makeSequenceTable(mergers)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
#removing some lengths with low frequency
seqtab2 <- seqtab[,nchar(colnames(seqtab)) %in% seq(297,310)]
table(nchar(getSequences(seqtab2)))
dim(seqtab2)
plot(table(nchar(getSequences(seqtab2))))
seqtab2.nochim <- removeBimeraDenovo(seqtab2, method="consensus", multithread=TRUE, verbose=TRUE)
sum(seqtab2.nochim)/sum(seqtab2)
#~############################~#
##### Assign Taxonomy ##########
#~############################~#
taxa <- assignTaxonomy(seqtab2.nochim, "~/Downloads/GeoSymbio_ITS2_LocalDatabase_verForPhyloseq.fasta",tryRC=TRUE,verbose=TRUE)
unname(head(taxa))
path
write.csv(seqtab2.nochim, file="~/Downloads/fasta/its2_seqtab2.nochim.csv")
write.csv(taxa, file="~/Downloads/fasta/its2_taxa.csv")
library("indicspecies")
citation("indicspecies")
multipatt
?multipatt
multipatt()
# Install Required packages
#install.packages("igraph")
library("igraph")
#install.packages("qgraph")
library("qgraph")
#install.packages("qgraph")
library("qgraph")
#install.packages("MCL")
library("MCL")
#install.packages("vegan")
library("vegan")
# Install SpiecEasi package
#install.packages("devtools")
library(devtools)
#install_github("zdk123/SpiecEasi")
library("SpiecEasi")
data_1516 <- read.csv("~/florida_irma/seq.trim.sid.1516.no0.csv") #from 2015&2016
data_1516 <- read.csv("seq.trim.sid.1516.no0.csv") #from 2015&2016
setwd("~/CS506-Spring2020-Projects/dev2and3")
setwd("~/CS506-Spring2020-Projects/nicfall/dev2and3")
data_1516 <- read.csv("seq.trim.sid.1516.no0 copy.csv") #from 2015&2016
data_17 <- read.csv("~/florida_irma/seq.trim.sid.17.no0 copy.csv") #from 2017
data_18 <- read.csv("~/florida_irma/seq.trim.sid.1516.no0 copy.csv") #from 2018
data_17 <- read.csv("seq.trim.sid.17.no0 copy.csv") #from 2017
data_18 <- read.csv("seq.trim.sid.1516.no0 copy.csv") #from 2018
View(data_1516)
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516)
data_18 <- read.csv("seq.trim.sid.18.no0 copy.csv") #from 2018
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516)
data_1516_2 <- data_1516[-which(colMeans(data_1516) <= 2),]
View(data_1516_2)
colMeans(data_1516)
which(colMeans(data_1516) <= 2)
data_1516_2 <- data_1516[,-which(colMeans(data_1516) <= 2)]
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
sparcc.matrix_1516 <- sparcc(data_1516_2)
sparcc.cutoff <- 0.3
sparcc.adj_1516 <- ifelse(abs(sparcc.matrix_1516$Cor) >= sparcc.cutoff, 1, 0)
# Add OTU names to rows and columns
colnames(sparcc.adj_1516) <- colnames(data_1516)
# Add OTU names to rows and columns
rownames(sparcc.adj_1516) <- colnames(data_1516)
View(data_1516)
row.names=1
data_1516 <- read.csv("seq.trim.sid.1516.no0 copy.csv",row.names=1) #from 2015&2016
data_1516_2 <- data_1516[,-which(colMeans(data_1516) <= 2)]
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
View(data_1516_2)
View(sparcc.matrix_1516)
sparcc.cutoff <- 0.3
sparcc.adj_1516 <- ifelse(abs(sparcc.matrix_1516$Cor) >= sparcc.cutoff, 1, 0)
View(sparcc.adj_1516)
# Add OTU names to rows and columns
rownames(sparcc.adj_1516) <- colnames(data_1516)
View(sparcc.adj_1516)
View(data_1516_2)
# Add OTU names to rows and columns
rownames(sparcc.adj_1516) <- colnames(data_1516_2)
colnames(sparcc.adj_1516) <- colnames(data_1516_2)
# Build network from adjacency
sparcc.net_1516 <- graph.adjacency(sparcc.adj_1516,
mode = "undirected",
diag = FALSE)
# Use sparcc.net for the rest of the method
net_1516 <- sparcc.net_1516
# Hub detection
net_1516.cn <- closeness(net_1516)
net_1516.bn <- betweenness(net_1516)
net_1516.pr <- page_rank(net_1516)$vector
net_1516.hs <- hub_score(net_1516)$vector
net_1516.hs.sort <- sort(net_1516.hs, decreasing = TRUE)
net_1516.hs.top5 <- head(net_1516.hs.sort, n = 5)
# Function 2: Plot network with node size scaled to hubbiness
plot.net <- function(net, scores, outfile, title) {
# Convert node label from names to numerical IDs.
features <- V(net)$name
col_ids <- seq(1, length(features))
V(net)$name <- col_ids
node.names <- features[V(net)] # Nodes’ color.
V(net)$color <- "white"
# Define output image file.
outfile <- paste(outfile, "jpg", sep=".") # Image properties.
jpeg(outfile, width = 4800, height = 9200, res = 300, quality = 100)
par(oma = c(4, 1, 1, 1))
# Main plot function.
plot(net, vertex.size = (scores*5)+4, vertex.label.cex = 1)
title(title, cex.main = 4)
# Plot legend containing OTU names.
labels = paste(as.character(V(net)), node.names, sep = ") ")
legend("bottom", legend = labels, xpd = TRUE, ncol = 5, cex = 1.2)
dev.off()
}
plot.net(net_1516, net_1516.hs, outfile = "network_1516", title = "Network - 2015 & 2016")
# Plot legend containing OTU names.
#labels = paste(as.character(V(net)), node.names, sep = ") ")
#legend("bottom", legend = labels, xpd = TRUE, ncol = 5, cex = 1.2)
dev.off()
# Function 2: Plot network with node size scaled to hubbiness
plot.net <- function(net, scores, outfile, title) {
# Convert node label from names to numerical IDs.
features <- V(net)$name
col_ids <- seq(1, length(features))
V(net)$name <- col_ids
node.names <- features[V(net)] # Nodes’ color.
V(net)$color <- "white"
# Define output image file.
outfile <- paste(outfile, "jpg", sep=".") # Image properties.
jpeg(outfile, width = 4800, height = 9200, res = 300, quality = 100)
par(oma = c(4, 1, 1, 1))
# Main plot function.
plot(net, vertex.size = (scores*5)+4, vertex.label.cex = 1)
title(title, cex.main = 4)
# Plot legend containing OTU names.
#labels = paste(as.character(V(net)), node.names, sep = ") ")
#legend("bottom", legend = labels, xpd = TRUE, ncol = 5, cex = 1.2)
dev.off()
}
plot.net(net_1516, net_1516.hs, outfile = "network_1516", title = "Network - 2015 & 2016")
data_17 <- read.csv("seq.trim.sid.17.no0 copy.csv",row.names=1) #from 2017
data_18 <- read.csv("seq.trim.sid.18.no0 copy.csv",row.names=1) #from 2018
data_17_2 <- data_17[,-which(colMeans(data_17) <= 2)]
data_18_2 <- data_18[,-which(colMeans(data_18) <= 2)]
sparcc.matrix_17 <- sparcc(data_17)
sparcc.matrix_18 <- sparcc(data_18)
sparcc.cutoff <- 0.3
sparcc.adj_17 <- ifelse(abs(sparcc.matrix_17$Cor) >= sparcc.cutoff, 1, 0)
sparcc.adj_18 <- ifelse(abs(sparcc.matrix_18$Cor) >= sparcc.cutoff, 1, 0)
rownames(sparcc.adj_17) <- colnames(data_17_2)
View(sparcc.adj_1516)
View(sparcc.adj_17)
sparcc.matrix_17 <- sparcc(data_17_2)
sparcc.matrix_18 <- sparcc(data_18_2)
sparcc.adj_17 <- ifelse(abs(sparcc.matrix_17$Cor) >= sparcc.cutoff, 1, 0)
sparcc.adj_18 <- ifelse(abs(sparcc.matrix_18$Cor) >= sparcc.cutoff, 1, 0)
rownames(sparcc.adj_17) <- colnames(data_17_2)
colnames(sparcc.adj_17) <- colnames(data_17_2)
rownames(sparcc.adj_18) <- colnames(data_18_2)
colnames(sparcc.adj_18) <- colnames(data_18_2)
sparcc.net_17 <- graph.adjacency(sparcc.adj_17,
mode = "undirected",
diag = FALSE)
sparcc.net_18 <- graph.adjacency(sparcc.adj_18,
mode = "undirected",
diag = FALSE)
net_18 <- sparcc.net_18
net_17 <- sparcc.net_17
net_17.cn <- closeness(net_17)
net_17.bn <- betweenness(net_17)
net_17.pr <- page_rank(net_17)$vector
net_17.hs <- hub_score(net_17)$vector
net_17.hs.sort <- sort(net_17.hs, decreasing = TRUE)
net_17.hs.top5 <- head(net_17.hs.sort, n = 5)
net_18.cn <- closeness(net_18)
net_18.bn <- betweenness(net_18)
net_18.pr <- page_rank(net_18)$vector
net_18.hs <- hub_score(net_18)$vector
net_18.hs.sort <- sort(net_18.hs, decreasing = TRUE)
net_18.hs.top5 <- head(net_18.hs.sort, n = 5)
net_18.cn <- closeness(net_18)
net_18.bn <- betweenness(net_18)
net_18.pr <- page_rank(net_18)$vector
net_18.hs <- hub_score(net_18)$vector
net_18.hs.sort <- sort(net_18.hs, decreasing = TRUE)
net_18.hs.top5 <- head(net_18.hs.sort, n = 5)
# Function 2: Plot network with node size scaled to hubbiness
plot.net <- function(net, scores, outfile, title) {
# Convert node label from names to numerical IDs.
features <- V(net)$name
col_ids <- seq(1, length(features))
V(net)$name <- col_ids
node.names <- features[V(net)] # Nodes’ color.
V(net)$color <- "white"
# Define output image file.
outfile <- paste(outfile, "jpg", sep=".") # Image properties.
jpeg(outfile, width = 4800, height = 9200, res = 300, quality = 100)
par(oma = c(4, 1, 1, 1))
# Main plot function.
plot(net, vertex.size = (scores*5)+4, vertex.label.cex = 1)
title(title, cex.main = 4)
# Plot legend containing OTU names.
#labels = paste(as.character(V(net)), node.names, sep = ") ")
#legend("bottom", legend = labels, xpd = TRUE, ncol = 5, cex = 1.2)
dev.off()
}
plot.net(net_17, net_17.hs, outfile = "network_17", title = "Network - 2017")
plot.net(net_18, net_18.hs, outfile = "network_18", title = "Network - 2018")
View(sparcc.matrix_1516)
View(net_1516)
?closeness()
#testing
eigen_centrality(net_1516)
#testing
eigen.1516 <- eigen_centrality(net_1516)
View(eigen.1516)
View(eigen.1516)
eigen.1516[["vector"]]
eigen.1516[[vector]]
eigen.1516[vector]
eigen.1516[["vector"]]
eigen.1516.sorted <- data.frame(eigen.1516[["vector"]])
eigen.1516.tosort <- data.frame(eigen.1516[["vector"]])
View(eigen.1516.sorted)
View(eigen.1516.tosort)
eigen.1516.sorted <- order(eigen.1516.tosort)
View(eigen.1516.tosort)
View(eigen.1516)
eigen.1516.sorted <- order(eigen.1516.tosort$eigen.1516...vector...)
View(eigen.1516.tosort)
eigen.1516.sorted <- order(eigen.1516.tosort$eigen.1516...vector...)
View(eigen.1516.sorted)
eigen.1516.sorted <- eigen.1516.tosort[order(eigen.1516.tosort$eigen.1516...vector...)]
order(eigen.1516.tosort$eigen.1516...vector...)
eigen.1516.sorted <- eigen.1516.tosort$eigen.1516...vector...[order(eigen.1516.tosort$eigen.1516...vector...)]
View(eigen.1516.sorted)
eigen.1516.sorted <- eigen.1516.tosort$eigen.1516...vector...[order(eigen.1516.tosort$eigen.1516...vector...),]
eigen.1516.sorted <- eigen.1516.tosort$eigen.1516...vector...[,order(eigen.1516.tosort$eigen.1516...vector...)]
eigen.1516.sorted <- eigen.1516.tosort[order(eigen.1516...vector...)]
eigen.1516.sorted <- eigen.1516.tosort[order(eigen.1516.tosort$eigen.1516...vector...)]
order(eigen.1516.tosort$eigen.1516...vector...)
eigen.1516.sorted <- eigen.1516.tosort[order(eigen.1516.tosort$eigen.1516...vector...),]
View(eigen.1516.sorted)
eigen.1516.tosort$vector <- eigen.1516.tosort$eigen.1516...vector...
eigen.1516.sorted <- eigen.1516.tosort[order(vector),]
eigen.1516.sorted <- eigen.1516.tosort[order(eigen.1516.tosort$vector),]
View(eigen.1516.sorted)
eigen.1516.sorted <- eigen.1516.tosort[order(-eigen.1516.tosort$vector),]
View(eigen.1516.sorted)
eigen.1516.top20 <- eigen.1516.sorted[1:20,]
View(eigen.1516.top20)
library(ggplot2)
eigen.1516.sorted$sqs <- rownames(eigen.1516.sorted)
eigen.1516.top20 <- eigen.1516.sorted[1:20,]
ggplot(eigen.1516.top20,aes(x=sqs,y=vector))
ggplot(eigen.1516.top20,aes(x=sqs,y=vector))+
geom_bar()
ggplot(eigen.1516.top20,aes(x=sqs))+
geom_bar()
ggplot(eigen.1516.top20,aes(x=sqs,y=vector))+
geom_bar(stat="identity")
eigen.1516.top20$sqs
str(eigen.1516.top20)
eigen.1516.top20$sqs <- as.factor(eigen.1516.top20$sqs)
ggplot(eigen.1516.top20,aes(x=sqs,y=vector))+
geom_bar(stat="identity")
c(eigen.1516.top20$sqs)
eigen.1516.top20$sqs
sqs_order <- eigen.1516.top20$sqs
eigen.1516.top20$sqs <- factor(eigen.1516.top20$sqs,levels=sqs_order)
ggplot(eigen.1516.top20,aes(x=sqs,y=vector))+
geom_bar(stat="identity")
gg.eig.1516 <- ggplot(eigen.1516.top20,aes(x=sqs,y=vector))+
geom_bar(stat="identity")
eigen.17 <- eigen_centrality(net_17)
eigen.17.tosort <- data.frame(eigen.17[["vector"]])
eigen.17.tosort$vector <- eigen.17.tosort$eigen.17...vector...
eigen.17.sorted <- eigen.17.tosort[order(-eigen.17.tosort$vector),]
eigen.17.sorted$sqs <- rownames(eigen.17.sorted)
eigen.17.top20 <- eigen.17.sorted[1:20,]
sqs_order <- eigen.17.top20$sqs
eigen.17.top20$sqs <- factor(eigen.17.top20$sqs,levels=sqs_order)
gg.eig.17 <- ggplot(eigen.17.top20,aes(x=sqs,y=vector))+
geom_bar(stat="identity")
gg.eig.17
eigen.18 <- eigen_centrality(net_18)
eigen.18.tosort <- data.frame(eigen.18[["vector"]])
eigen.18.tosort$vector <- eigen.18.tosort$eigen.18...vector...
eigen.18.sorted <- eigen.18.tosort[order(-eigen.18.tosort$vector),]
eigen.18.sorted$sqs <- rownames(eigen.18.sorted)
eigen.18.top20 <- eigen.18.sorted[1:20,]
sqs_order <- eigen.18.top20$sqs
eigen.18.top20$sqs <- factor(eigen.18.top20$sqs,levels=sqs_order)
gg.eig.18 <- ggplot(eigen.18.top20,aes(x=sqs,y=vector))+
geom_bar(stat="identity")
gg.eig.18
library("ggpubr")
ggarrange(gg.eig.1516,gg.eig.17,gg.eig.18,nrow=1)
ggarrange(gg.eig.1516,gg.eig.17,gg.eig.18)
gg.eig.1516 <- ggplot(eigen.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))
eigen.1516 <- eigen_centrality(net_1516)
eigen.1516.tosort <- data.frame(eigen.1516[["vector"]])
eigen.1516.tosort$vector <- eigen.1516.tosort$eigen.1516...vector...
eigen.1516.sorted <- eigen.1516.tosort[order(-eigen.1516.tosort$vector),]
eigen.1516.sorted$sqs <- rownames(eigen.1516.sorted)
eigen.1516.top10 <- eigen.1516.sorted[1:10,]
sqs_order <- eigen.1516.top10$sqs
eigen.1516.top10$sqs <- factor(eigen.1516.top10$sqs,levels=sqs_order)
gg.eig.1516 <- ggplot(eigen.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))
eigen.17 <- eigen_centrality(net_17)
eigen.17.tosort <- data.frame(eigen.17[["vector"]])
eigen.17.tosort$vector <- eigen.17.tosort$eigen.17...vector...
eigen.17.sorted <- eigen.17.tosort[order(-eigen.17.tosort$vector),]
eigen.17.sorted$sqs <- rownames(eigen.17.sorted)
eigen.17.top10 <- eigen.17.sorted[1:10,]
sqs_order <- eigen.17.top10$sqs
eigen.17.top10$sqs <- factor(eigen.17.top10$sqs,levels=sqs_order)
gg.eig.17 <- ggplot(eigen.17.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))
eigen.18 <- eigen_centrality(net_18)
eigen.18.tosort <- data.frame(eigen.18[["vector"]])
eigen.18.tosort$vector <- eigen.18.tosort$eigen.18...vector...
eigen.18.sorted <- eigen.18.tosort[order(-eigen.18.tosort$vector),]
eigen.18.sorted$sqs <- rownames(eigen.18.sorted)
eigen.18.top10 <- eigen.18.sorted[1:10,]
sqs_order <- eigen.18.top10$sqs
eigen.18.top10$sqs <- factor(eigen.18.top10$sqs,levels=sqs_order)
gg.eig.18 <- ggplot(eigen.18.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))
ggarrange(gg.eig.1516,gg.eig.17,gg.eig.18)
gg.eig.1516 <- ggplot(eigen.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")
gg.eig.17 <- ggplot(eigen.17.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")
gg.eig.18 <- ggplot(eigen.18.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")
ggarrange(gg.eig.1516,gg.eig.17,gg.eig.18)
gg.eig.1516 <- ggplot(eigen.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")
gg.eig.17 <- ggplot(eigen.17.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")
gg.eig.18 <- ggplot(eigen.18.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")
ggarrange(gg.eig.1516,gg.eig.17,gg.eig.18)
btwn.1516 <- betweenness(net_1516)
btwn.1516.tosort <- data.frame(btwn.1516[["vector"]])
View(btwn.1516)
btwn.1516.tosort <- betweenness(net_1516)
btwn.1516.tosort$vector <- btwn.1516.tosort$btwn.1516...vector...
btwn.1516.tosort$vector <- btwn.1516.tosort$V1
btwn.1516.tosort <- data.frame(betweenness(net_1516))
View(btwn.1516.tosort)
btwn.1516.tosort$vector <- btwn.1516.tosort$betwenness.net_1516.
btwn.1516.sorted <- btwn.1516.tosort[order(-btwn.1516.tosort$vector),]
View(btwn.1516.tosort)
btwn.1516.tosort$vector <- btwn.1516.tosort$betwenness.net_1516.
btwn.1516.tosort$vector <- btwn.1516.tosort$betweenness.net_1516.
View(btwn.1516.tosort)
btwn.1516.sorted <- btwn.1516.tosort[order(-btwn.1516.tosort$vector),]
btwn.1516.sorted$sqs <- rownames(btwn.1516.sorted)
btwn.1516.top10 <- btwn.1516.sorted[1:10,]
sqs_order <- btwn.1516.top10$sqs
btwn.1516.top10$sqs <- factor(btwn.1516.top10$sqs,levels=sqs_order)
gg.btwn.1516 <- ggplot(btwn.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Betweenness centrality")+
xlab("Bacterial sequence")
gg.btwn.1516
btwn.17.tosort <- data.frame(betweenness(net_17))
btwn.17.tosort$vector <- btwn.17.tosort$betweenness.net_17.
btwn.17.sorted <- btwn.17.tosort[order(-btwn.17.tosort$vector),]
btwn.17.sorted$sqs <- rownames(btwn.17.sorted)
btwn.17.top10 <- btwn.17.sorted[1:10,]
sqs_order <- btwn.17.top10$sqs
btwn.17.top10$sqs <- factor(btwn.17.top10$sqs,levels=sqs_order)
gg.btwn.17 <- ggplot(btwn.17.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Betweenness centrality")+
xlab("Bacterial sequence")
gg.eig.18 <- ggplot(eigen.18.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")+
ggtitle("2018 (post-Irma)")
gg.eig.1516 <- ggplot(eigen.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")+
ggtitle("2015 & 2016 (pre-Irma)")
gg.eig.17 <- ggplot(eigen.17.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")+
ggtitle("2017 (Irma)")
ggarrange(gg.eig.1516,gg.eig.17,gg.eig.18)
gg.btwn.1516 <- ggplot(btwn.1516.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Betweenness centrality")+
xlab("Bacterial sequence")+
ggtitle("2015 & 2016 (pre-Irma)")
gg.btwn.17 <- ggplot(btwn.17.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Betweenness centrality")+
xlab("Bacterial sequence")+
ggtitle("2017 (Irma)")
gg.btwn.18 <- ggplot(btwn.18.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Betweenness centrality")+
xlab("Bacterial sequence")+
ggtitle("2018 (post-Irma)")
btwn.18.tosort <- data.frame(betweenness(net_18))
btwn.18.tosort$vector <- btwn.18.tosort$betweenness.net_18.
btwn.18.sorted <- btwn.18.tosort[order(-btwn.18.tosort$vector),]
btwn.18.sorted$sqs <- rownames(btwn.18.sorted)
btwn.18.top10 <- btwn.18.sorted[1:10,]
sqs_order <- btwn.18.top10$sqs
btwn.18.top10$sqs <- factor(btwn.18.top10$sqs,levels=sqs_order)
gg.btwn.18 <- ggplot(btwn.18.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Betweenness centrality")+
xlab("Bacterial sequence")+
ggtitle("2018 (post-Irma)")
ggarrange(gg.btwn.1516,gg.btwn.17,gg.btwn.18)
