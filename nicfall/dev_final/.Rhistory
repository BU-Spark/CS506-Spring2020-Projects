ylab("Density")
library(dplyr)
df <- kd0.5 %>%
group_by(kd_490) %>%
summarise(counts = n())
ggplot(df, aes(x = kd_490, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean()
#### temperature ####
temp <- read.csv("~/Google Drive/Florida/FL_env/fl_sst_mur_expanded.csv")
#### temperature ####
temp <- read.csv("~/Google Drive/Florida/FL_env/JP/fl_sst_mur_expanded.csv")
temp$date <- paste(temp$year,"/",temp$month,"/",temp$day)
temp$date <- gsub(' ', '', temp$date) #remove spaces between date components
temp$date <- as.Date(temp$date,format="%Y/%m/%d") #making R happy with formatting
#### temperature ####
temp <- read.csv("~/Google Drive/Florida/FL_env/JP/fl_sst_mur_expanded.csv")
temp$date <- paste(temp$year,"/",temp$month,"/",temp$day)
temp$date <- gsub(' ', '', temp$date) #remove spaces between date components
temp$date <- as.Date(temp$date,format="%Y/%m/%d") #making R happy with formatting
all$mon_day <- format(all$date,"%m/%d")
#### temperature ####
temp <- read.csv("~/Google Drive/Florida/FL_env/JP/fl_sst_mur_expanded.csv")
temp$date <- paste(temp$year,"/",temp$month,"/",temp$day)
temp$date <- gsub(' ', '', temp$date) #remove spaces between date components
temp$date <- as.Date(temp$date,format="%Y/%m/%d") #making R happy with formatting
temp$mon_day <- format(temp$date,"%m/%d")
#don't want biscayne
#setting up site variables
temp$transect <- ifelse(temp$site=="yirbs",c("Biscayne"),ifelse(temp$site=="yorfr",c("Biscayne"),
ifelse(temp$site=="yircr",c("Mid"),ifelse(temp$site=="yorar",c("Mid"),
ifelse(temp$site=="yirbh",c("Upper"),ifelse(temp$site=="yorcf",c("Upper"),c("Lower")))))))
View(temp)
#reshape with site names
tless <- temp[,1:10]
str(tless)
colnames(tless) <- c("date","year","month","day","site1","site2","site3","site4","site5","site6")
str(tless)
tless2 <- reshape(tless,varying=c("site1","site2","site3","site4","site5","site6"),direction="long",sep="")
colnames(tless2) <- c("date","year","month","day","site","temp","num")
tless2$site <- gsub(1,"esambo_or",tless2$site)
tless2$site <- gsub(2,"rockytop_or",tless2$site)
tless2$site <- gsub(3,"cheeca_ir",tless2$site)
tless2$site <- gsub(4,"carysfort_or",tless2$site)
tless2$site <- gsub(5,"basinhill_ir",tless2$site)
tless2$site <- gsub(6,"wwasher_ir",tless2$site)
str(tless2)
View(tless2)
summary(tless2$site)
tless2$site <- as.factor(tless2$site)
summary(tless2$site)
#don't want biscayne
#setting up site variables
temp$transect <- ifelse(temp$site=="cheeca_ir",c("Midle"),ifelse(temp$site=="rockytop_or",c("Middle"),
ifelse(temp$site=="basinhill_ir",c("Upper"),ifelse(temp$site=="carysfort_or",c("Upper"),c("Lower")))))))
#don't want biscayne
#setting up site variables
temp$transect <- ifelse(temp$site=="cheeca_ir",c("Midle"),ifelse(temp$site=="rockytop_or",c("Middle"),
ifelse(temp$site=="basinhill_ir",c("Upper"),ifelse(temp$site=="carysfort_or",c("Upper"),c("Lower"))))))
#don't want biscayne
#setting up site variables
temp$transect <- ifelse(temp$site=="cheeca_ir",c("Midle"),ifelse(temp$site=="rockytop_or",c("Middle"),
ifelse(temp$site=="basinhill_ir",c("Upper"),ifelse(temp$site=="carysfort_or",c("Upper"),c("Lower")))))
#don't want biscayne
#setting up site variables
tless2$transect <- ifelse(tless2$site=="cheeca_ir",c("Middle"),ifelse(tless2$site=="rockytop_or",c("Middle"),ifelse(tless2$site=="basinhill_ir",c("Upper"),ifelse(tless2$site=="carysfort_or",c("Upper"),c("Lower")))))
tless2$transect <- as.factor(tless2$transect)
str(tless2)
tless2$zone <- ifelse(tless2$site=="basinhill_ir",c("inner"),ifelse(tless2$site=="cheeca_ir",c("inner"),ifelse(tless2$site=="wwasher_ir",c("inner"),c("outer")))))
tless2$zone <- ifelse(tless2$site=="basinhill_ir",c("inner"),ifelse(tless2$site=="cheeca_ir",c("inner"),ifelse(tless2$site=="wwasher_ir",c("inner"),c("outer"))))
tless2$zone <- as.factor(tless2$zone)
View(tless2)
ggplot(tless2,aes(x=date,y=temp,color=RZ))+
geom_point()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"))+
ylab(bquote(K[d]*490~"(turbidity)"))+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(tless2,aes(x=date,y=temp,color=zone))+
geom_point()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"))+
ylab(bquote(K[d]*490~"(turbidity)"))+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(tless2,aes(x=date,y=temp,color=zone))+
#geom_point()+
geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"))+
ylab(bquote(K[d]*490~"(turbidity)"))+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(tless2,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"))+
ylab(bquote(K[d]*490~"(turbidity)"))+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
#a month in the life
justaug <- subset(tless2,month==08)
ggplot(justaug,aes(x=date,y=temp))+
geom_smooth()
ggplot(justaug,aes(x=mon_day,y=temp,color=))+
geom_smooth()
View(tless2)
justaug$mon_day <- format(justaug$date,"%m/%d")
ggplot(justaug,aes(x=mon_day,y=temp,color=))+
geom_smooth()
ggplot(justaug,aes(x=mon_day,y=temp,color=zone))+
geom_smooth()
ggplot(justaug,aes(x=mon_day,y=temp))+
geom_point()
ggplot(justaug,aes(x=mon_day,y=temp,color=zone))+
geom_point()
justaug$mon_day <- as.factor(justaug$mon_day)
ggplot(justaug,aes(x=mon_day,y=temp,color=zone))+
geom_point()
ggplot(justaug,aes(x=mon_day,y=temp,color=zone))+
geom_smooth()
ggplot(justaug,aes(x=mon_day,y=temp,color=zone))+
geom_line()
ggplot(justaug,aes(x=mon_day,y=temp,color=zone,group=zone))+
geom_line()
ggplot(justaug,aes(x=mon_day,y=temp,color=zone,group=zone))+
geom_line()+
facet_grid(transect~.)
ggplot(justaug,aes(x=mon_day,y=temp,color=zone,group=zone))+
geom_smooth()+
facet_grid(transect~.)
ggplot(justaug,aes(x=mon_day,y=temp,color=zone,group=zone))+
geom_line()+
facet_grid(transect~.)
ggplot(justaug,aes(x=mon_day,y=temp,color=zone,group=zone))+
geom_point()+
facet_grid(transect~.)
#smaller year
just2016 <- subset(tless2,year==2016)
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"))+
ylab(bquote(K[d]*490~"(turbidity)"))+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"))+
ylab('Temperature (˚C)')+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"),x.axis.text=element_text(angle=45))+
ylab('Temperature (˚C)')+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"),axis.text.x=element_text(angle=45))+
ylab('Temperature (˚C)')+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
quartz()
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"),axis.text.x=element_text(angle=45))+
ylab('Temperature (˚C)')+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"),axis.text.x=element_text(angle=45,hjust=1))+
ylab('Temperature (˚C)')+
#scale_x_date(breaks=c("09-10","09-20"),labels=c("09-10","09-20"))+
xlab("Date")
ggplot(just2016,aes(x=date,y=temp,color=zone))+
geom_line()+
#geom_smooth()+
facet_grid(transect~.)+
theme_cowplot()+
scale_color_manual(name="Reef zone",labels=c("Inshore","Offshore"),values=c("#3BBA76","#453882"))+
theme(text=element_text(family="Titillium Web"),axis.text.x=element_text(angle=45,hjust=1))+
ylab('Temperature (˚C)')
#install.packages("taxize")
library("taxize")
#BiocManager::install("ggtree")
library("ggtree")
#BiocManager::install("treeio")
library("treeio")
library("ggplot2")
options(ENTREZ_KEY = "6f9d730be6f396857a47644f81bdc133a508")
#higher taxa tree
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
str(fam1)
f1 <- as.character(fam1[1:10,])
f1 <- as.character(fam1[1:13,])
f1out <- classification(f1, db = "ncbi")
ftree <- class2tree(f1out, check = TRUE)
plot(ftree)
higher_tree <- as.treedata(ftree[["phylo"]])
ggtree(higher_tree)+
geom_treescale(family="Times")+
geom_tiplab(hjust=-0.05,family="Times")+
ggplot2::xlim(0,90)
#higher taxa tree
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
str(fam1)
f1 <- as.character(fam1[1:13,])
f1 <- as.character(fam1[1:9,])
f1out <- classification(f1, db = "ncbi")
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
f1 <- as.character(fam1[1:9,])
f1out <- classification(f1, db = "ncbi")
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
f1 <- as.character(fam1[1:9,])
f1out <- classification(f1, db = "ncbi")
ftree <- class2tree(f1out, check = TRUE)
plot(ftree)
higher_tree <- as.treedata(ftree[["phylo"]])
ggtree(higher_tree)+
geom_treescale(family="Times")+
geom_tiplab(hjust=-0.05,family="Times")+
ggplot2::xlim(0,90)
plot(ftree)
#basic tree
quartz()
ggtree(higher_tree)+
geom_treescale(family="Times")+
geom_tiplab(hjust=-0.05,family="Times")+
ggplot2::xlim(0,90)
#higher taxa tree
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
str(fam1)
f1 <- as.character(fam1[1:11,])
f1out <- classification(f1, db = "ncbi")
ftree <- class2tree(f1out, check = TRUE)
plot(ftree)
higher_tree <- as.treedata(ftree[["phylo"]])
higher_tree <- as.treedata(ftree[["phylo"]])
ggtree(higher_tree)+
geom_treescale(family="Times")+
geom_tiplab(hjust=-0.05,family="Times")+
ggplot2::xlim(0,90)
#higher taxa tree
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
str(fam1)
f1 <- as.character(fam1[1:13,])
f1out <- classification(f1, db = "ncbi")
ftree <- class2tree(f1out, check = TRUE)
plot(ftree)
higher_tree <- as.treedata(ftree[["phylo"]])
ggtree(higher_tree)+
geom_treescale(family="Times")+
geom_tiplab(hjust=-0.05,family="Times")+
ggplot2::xlim(0,90)
#higher taxa tree
fam1 <- read.csv("~/Downloads/vertzoo_exam3.csv",header=F,sep=",")
str(fam1)
f1 <- as.character(fam1[1:13,])
f1out <- classification(f1, db = "ncbi")
ftree <- class2tree(f1out, check = TRUE)
View(fam1)
f1 <- as.character(fam1[1:12,])
f1out <- classification(f1, db = "ncbi")
ftree <- class2tree(f1out, check = TRUE)
plot(ftree)
higher_tree <- as.treedata(ftree[["phylo"]])
ggtree(higher_tree)+
geom_treescale(family="Times")+
geom_tiplab(hjust=-0.05,family="Times")+
ggplot2::xlim(0,90)
setwd('~/CS506-Spring2020-Projects/nicfall/dev_final')
data_1516 <- read.csv("seq.glom.15.no0.csv",row.names=1) #from 2015
data_17 <- read.csv("seq.glom.17.no0.csv",row.names=1) #from 2017
data_18 <- read.csv("seq.glom.18.no0.csv",row.names=1) #from 2018
data_1516_2 <- data_1516[,-which(colMeans(data_1516) <= 2)]
data_17_2 <- data_17[,-which(colMeans(data_17) <= 2)]
data_18_2 <- data_18[,-which(colMeans(data_18) <= 2)]
igraph
library('igraph')
View(data_17_2)
data_1516_2 <- data_1516[,-which(colMeans(data_1516) <= 2)]
data_17_2 <- data_17[,-which(colMeans(data_17) <= 2)]
data_18_2 <- data_18[,-which(colMeans(data_18) <= 2)]
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
library('igraph')
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
library('qgraph')
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
library("MCL")
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
library("SpiecEasi")
# SparCC network
sparcc.matrix_1516 <- sparcc(data_1516_2)
sparcc.matrix_17 <- sparcc(data_17_2)
sparcc.matrix_18 <- sparcc(data_18_2)
sparcc.cutoff <- 0.3
sparcc.adj_1516 <- ifelse(abs(sparcc.matrix_1516$Cor) >= sparcc.cutoff, 1, 0)
sparcc.adj_17 <- ifelse(abs(sparcc.matrix_17$Cor) >= sparcc.cutoff, 1, 0)
sparcc.adj_18 <- ifelse(abs(sparcc.matrix_18$Cor) >= sparcc.cutoff, 1, 0)
# Add OTU names to rows and columns
rownames(sparcc.adj_1516) <- colnames(data_1516_2)
colnames(sparcc.adj_1516) <- colnames(data_1516_2)
rownames(sparcc.adj_17) <- colnames(data_17_2)
colnames(sparcc.adj_17) <- colnames(data_17_2)
rownames(sparcc.adj_18) <- colnames(data_18_2)
colnames(sparcc.adj_18) <- colnames(data_18_2)
# Build network from adjacency
sparcc.net_1516 <- graph.adjacency(sparcc.adj_1516,
mode = "undirected",
diag = FALSE)
sparcc.net_17 <- graph.adjacency(sparcc.adj_17,
mode = "undirected",
diag = FALSE)
sparcc.net_18 <- graph.adjacency(sparcc.adj_18,
mode = "undirected",
diag = FALSE)
# Use sparcc.net for the rest of the method
net_1516 <- sparcc.net_1516
net_17 <- sparcc.net_17
net_18 <- sparcc.net_18
# Hub detection
net_1516.cn <- closeness(net_1516)
data_15 <- read.csv("seq.glom.15.no0.csv",row.names=1) #from 2015
data_17 <- read.csv("seq.glom.17.no0.csv",row.names=1) #from 2017
data_18 <- read.csv("seq.glom.18.no0.csv",row.names=1) #from 2018
# Install Required packages
#install.packages("igraph")
library("igraph")
#install.packages("qgraph")
library("qgraph")
#install.packages("MCL")
library("MCL")
#install.packages("vegan")
library("vegan")
# Install SpiecEasi package
#install.packages("devtools")
library("devtools")
#install_github("zdk123/SpiecEasi")
library("SpiecEasi")
#install_github("zdk123/SpiecEasi")
library("SpiecEasi")
library("ggplot2")
library("ggpubr")
#removing low count families
data_15_2 <- data_15[,-which(colMeans(data_15) <= 2)] #lost 26 families
data_17_2 <- data_17[,-which(colMeans(data_17) <= 2)] #lost 33 families
data_18_2 <- data_18[,-which(colMeans(data_18) <= 2)] #lost 39 families
# SparCC network
sparcc.matrix_15 <- sparcc(data_15_2)
# SparCC network
sparcc.matrix_15 <- sparcc(data_15_2)
sparcc.matrix_17 <- sparcc(data_17_2)
sparcc.matrix_18 <- sparcc(data_18_2)
sparcc.cutoff <- 0.3
sparcc.adj_15 <- ifelse(abs(sparcc.matrix_15$Cor) >= sparcc.cutoff, 1, 0)
sparcc.adj_17 <- ifelse(abs(sparcc.matrix_17$Cor) >= sparcc.cutoff, 1, 0)
sparcc.adj_18 <- ifelse(abs(sparcc.matrix_18$Cor) >= sparcc.cutoff, 1, 0)
# Add family names to rows and columns
rownames(sparcc.adj_15) <- colnames(data_15_2)
colnames(sparcc.adj_15) <- colnames(data_15_2)
rownames(sparcc.adj_17) <- colnames(data_17_2)
colnames(sparcc.adj_17) <- colnames(data_17_2)
rownames(sparcc.adj_18) <- colnames(data_18_2)
colnames(sparcc.adj_18) <- colnames(data_18_2)
# Build network from adjacency
sparcc.net_15 <- graph.adjacency(sparcc.adj_15,
mode = "undirected",
diag = FALSE)
sparcc.net_17 <- graph.adjacency(sparcc.adj_17,
mode = "undirected",
diag = FALSE)
sparcc.net_18 <- graph.adjacency(sparcc.adj_18,
mode = "undirected",
diag = FALSE)
# Use sparcc.net for the rest of the method
net_15 <- sparcc.net_15
net_17 <- sparcc.net_17
net_18 <- sparcc.net_18
# Hub detection
net_15.cn <- closeness(net_15)
net_15.bn <- betweenness(net_15)
net_15.pr <- page_rank(net_15)$vector
net_15.hs <- hub_score(net_15)$vector
net_15.hs.sort <- sort(net_15.hs, decreasing = TRUE)
net_15.hs.top5 <- head(net_15.hs.sort, n = 5)
net_17.cn <- closeness(net_17)
net_17.bn <- betweenness(net_17)
net_17.pr <- page_rank(net_17)$vector
net_17.hs <- hub_score(net_17)$vector
net_17.hs.sort <- sort(net_17.hs, decreasing = TRUE)
net_17.hs.top5 <- head(net_17.hs.sort, n = 5)
net_18.cn <- closeness(net_18)
net_18.bn <- betweenness(net_18)
net_18.pr <- page_rank(net_18)$vector
net_18.hs <- hub_score(net_18)$vector
net_18.hs.sort <- sort(net_18.hs, decreasing = TRUE)
net_18.hs.top5 <- head(net_18.hs.sort, n = 5)
net_18.cn <- closeness(net_18)
net_18.bn <- betweenness(net_18)
net_18.pr <- page_rank(net_18)$vector
net_18.hs <- hub_score(net_18)$vector
net_18.hs.sort <- sort(net_18.hs, decreasing = TRUE)
net_18.hs.top5 <- head(net_18.hs.sort, n = 5)
eigen.15 <- eigen_centrality(net_15)
eigen.15.tosort <- data.frame(eigen.15[["vector"]])
eigen.15.tosort$vector <- eigen.15.tosort$eigen.15...vector...
eigen.15.sorted <- eigen.15.tosort[order(-eigen.15.tosort$vector),]
eigen.15.sorted$sqs <- rownames(eigen.15.sorted)
eigen.15.top10 <- eigen.15.sorted[1:10,]
sqs_order <- eigen.15.top10$sqs
eigen.15.top10$sqs <- factor(eigen.15.top10$sqs,levels=sqs_order)
gg.eig.15 <- ggplot(eigen.15.top10,aes(x=sqs,y=vector))+
geom_bar(stat="identity")+
theme(axis.text.x=element_text(angle=90,hjust=1))+
ylab("Eigenvector centrality")+
xlab("Bacterial sequence")+
ggtitle("2015 & 2016 (pre-Irma)")
#devtools::install_github("briatte/ggnet")
library(ggnet)
gg.net15 <- ggnet2(sparcc.adj_15,size="degree",size.cut=TRUE,alpha=0.5,color="#781C6D")+
ggtitle('Pre-Irma (2015)')
gg.net15 <- ggnet2(sparcc.adj_15,size="degree",size.cut=TRUE,alpha=0.5,color="#781C6D")+
ggtitle('Pre-Irma (2015)')
gg.net17 <- ggnet2(sparcc.adj_17,size="degree",size.cut=TRUE,alpha=0.5,color="#F8850F")+
ggtitle('Irma (2017)')
gg.net18 <- ggnet2(sparcc.adj_18,size="degree",size.cut=TRUE,alpha=0.5,color="#AE305C")+
ggtitle('Recovery? (2018)')
ggarrange(gg.net15,gg.net17,gg.net18)
# Build network from adjacency
sparcc.net_15 <- graph.adjacency(sparcc.adj_15,
mode = "undirected",
diag = FALSE)
sparcc.net_17 <- graph.adjacency(sparcc.adj_17,
mode = "undirected",
diag = FALSE)
sparcc.net_18 <- graph.adjacency(sparcc.adj_18,
mode = "undirected",
diag = FALSE)
# Use sparcc.net for the rest of the method
net_15 <- sparcc.net_15
net_17 <- sparcc.net_17
net_18 <- sparcc.net_18
# Hub detection
net_15.cn <- closeness(net_15)
data_15 <- read.csv("seq.glom.15.no0.csv",row.names=1) #from 2015
data_18 <- read.csv("seq.glom.18.no0.csv",row.names=1) #from 2018
head(data_15) #rows are coral samples, columns are bacterial families & their counts per sample
head(data_15,n=6) #rows are coral samples, columns are bacterial families & their counts per sample
?head
head(data_15,n=6L) #rows are coral samples, columns are bacterial families & their counts per sample
?head
# Install Required packages
#install.packages("igraph")
library("igraph")
#install.packages("qgraph")
library("qgraph")
#install.packages("qgraph")
library("qgraph")
#install.packages("MCL")
library("MCL")
#install.packages("vegan")
library("vegan")
# Install SpiecEasi package
#install.packages("devtools")
library("devtools")
#install_github("zdk123/SpiecEasi")
library("SpiecEasi")
library("ggplot2")
library("ggpubr")
#removing low count families
data_15_2 <- data_15[,-which(colMeans(data_15) <= 2)] #lost 26 families
